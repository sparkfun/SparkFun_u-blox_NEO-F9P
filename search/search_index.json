{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can get started experimenting with the breakout board. For the scope of this tutorial, we will highlight two of the examples from the Arduino Library. From there we will be able to build our own custom code to integrate the breakout board into a project.</p>"},{"location":"arduino_examples/#example-1-rawx","title":"Example 1: RAWX","text":"<p>This example shows how to configure the NEO-F9P GNSS for L5 band and overriding the health status. The output will indicating the type of signals that the NEO-F9P is receiving. Head to the example in the NEO-F9P folder (located in File Examples &gt; SparkFun u-blox GNSS V3 &gt; NEO-F9P &gt; Example1_RAWX).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud. Give the NEO-F9P a few minutes to get a satellite lock.</p> <p>The signals available will be output in the Serial Monitor. If everything goes well, you should see some L5 signals (highlighted in red).</p>"},{"location":"arduino_examples/#example-1-get-position-accuracy","title":"Example 1: Get Position Accuracy","text":"<p>Note</p> <p>Make sure that you are in the correct folder! These examples are in the ZED-F9P folder instead of the NEO-F9P folder.</p> <p>As a quick test to see if we are getting coordinates and how accurate the values are, we will be using the first example in the ZED-F9P folder (located in File Examples &gt; SparkFun u-blox GNSS V3 &gt; ZED-F9P &gt; Example1_GetPositionAccuracy). The example in this tutorial is technically the second one but we numbered the example based on the one that is within the ZED-F9P folder.</p> <p>As stated in the note in the previous section and example, you will need to enable the L5 band, override the health status, save the configuration, and power cycle the NEO-F9P. In the <code>setup()</code> function, make sure to include the following three lines after connecting to the NEO-F9P.</p> <pre><code>  //Add the following 3 lines below to enable L5 band and override health status check on the NEO-F9P\n  myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1); // Make sure the GPS L5 band is enabled (needed on the NEO-F9P)\n\n  myGNSS.setGPSL5HealthOverride(true); // Mark L5 signals as healthy - store in RAM and BBR\n\n  myGNSS.softwareResetGNSSOnly(); // Restart the GNSS to apply the L5 health override\n</code></pre> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud. Give the NEO-F9P a few minutes to get a satellite lock. The GPS coordinates and the accuracy will be output in the Serial Monitor.</p> <p>To increase accuracy, you will need to feed correction data from a correction source. Make sure to check the examples and tutorials linked in the next section.</p>"},{"location":"arduino_examples/#more-examples","title":"More Examples!","text":"<p>Now that you got it up and running, check out the other examples located in the ZED-F9P folder!</p> SparkFun_u-blox_GNSS_v3 &gt; examples &gt; ZED-F9P <p>Of course, to get the most out of the NEO-F9P, you will need an RTCM correction source. Depending on your setup, you will probably need a second NEO-F9P for a correction source. The following project tutorials allow you to set up the ZED-F9P as a reference station or rover.</p> <ul> <li> <p> </p> <p> How to Build a DIY GNSS Reference Station </p> </li> </ul> <ul> <li> <p> </p> <p> Setting up a Rover Base System </p> </li> </ul>"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written a library to work with the u-blox NEO-F9P. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun u-blox GNSS v3\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun u-blox GNSS Arduino Library - v3  (ZIP) <p>Once you have the library installed checkout the various examples! There are several examples in the library that cover more than just the NEO-F9P. Note that some examples will not apply depending on the modules features. To take advantage of the F9P, we will be looking at the ZED-F9P folder.</p>"},{"location":"enable_l5_band_and_override_health_status/","title":"Enabling L5 Band and Overriding Health Status","text":"<p>By default, the L5 band is disabled on the NEO-F9P. To take advantage of the L5 band, you will need to:</p> <ul> <li>enable the L5 band</li> <li>override the health status check</li> <li>save the settings into memory</li> <li>perform a software reset</li> </ul>"},{"location":"enable_l5_band_and_override_health_status/#configuring-with-the-arduino-library","title":"Configuring with the Arduino Library","text":"<p>Arduino</p> <p>Make sure that you are using the SparkFun u-blox GNSS Arduino Library v3.1.1+ in order to be able to take advantage of the following functions.</p> <p>To do this using the Arduino Library, users can add the following three lines of code in the <code>setup()</code> function after connecting a Qwiic cable between an Arduino to the NEO-F9P:</p> <pre><code>  if (myGNSS.begin() == false) //Connect to the u-blox module using Wire port\n  {\n    Serial.println(F(\"u-blox GNSS not detected at default I2C address. Please check wiring. Freezing.\"));\n    while (1);\n  }\n\n  myGNSS.setI2COutput(COM_TYPE_UBX); //Set the I2C port to output UBX only (turn off NMEA noise)\n  //myGNSS.saveConfiguration(); //Optional: Save the current settings to flash and BBR\n\n  //Add the following 3 lines below to enable L5 band and override health status check on the NEO-F9P\n  myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1); // Make sure the GPS L5 band is enabled (needed on the NEO-F9P)\n\n  myGNSS.setGPSL5HealthOverride(true); // Mark L5 signals as healthy - store in RAM and BBR\n\n  myGNSS.softwareResetGNSSOnly(); // Restart the GNSS to apply the L5 health override\n</code></pre>"},{"location":"enable_l5_band_and_override_health_status/#configuring-with-u-center","title":"Configuring with U-Center","text":"<p>Users can also enable the L5 band via U-Center v22.07. Connect a USB cable between the NEO-F9P breakout board and your computer. Then open the software, connect to the COM port that the board enumerated to, and head to View &gt; Generation 9 Configuration View. Once open, select the check box for GPS's L5. Select the check box for BBR. When ready, hit the Send Configuration button.</p> <p>To override the health status by heading to View &gt; Messages View &gt; CUSTOM. With the Custom Messages set for Hex, paste the following to configure the settings in RAM and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 00 01 00 00 01 00 32 10 01 DE ED\n</code></pre> <p>Then send the following to configure the settings in BBR and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 00 02 00 00 01 00 32 10 01 DF F5\n</code></pre> <p>Tip</p> <p>To confirm that the above UBX messages were sent successfully, check the <code>UBX-ACK-ACK</code> messages after sending the message. For users that want to revert to the default behavior, make sure to check the GPS L5 Configuration: GNSS receiver handling of GPS L5 health status application note on page 5 under Table 2: UBX binary strings to revert the GPS L5 health status monitoring to default.</p> <p>The \"Satellite Level History\" window should update and include the L5 bands if it is available.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the L1/L5 GNSS Antenna, SparkFun Qwiic GNSS-RTK L1/L5 Breakout - NEO-F9P, and IoT RedBoard - ESP32 for embedded systems. Of course, you can also connect the NEO-F9P directly to your computer without the need for a microcontroller if you decide to use the u-blox u-center software as well.</p>"},{"location":"hardware_hookup/#l1l5-dual-band-gnss-antenna","title":"L1/L5 Dual-Band GNSS Antenna","text":"<p>Connect a compatible dual-band antenna that is capable of receiving L1 and L5 bands. In this case, we used the \"GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA).\"  Insert the TNC side of the interface cable into the antenna's TNC connector. Secure the connection by tightening the screw until it is finger-tight. Then insert the SMA side of the interface cable into the GNSS-RTK L1/L5 Breakout Board's SMA connector. Secure the connection by using the SMA's hex nut until it is finger-tight.</p> <p>You will need to include an antenna ground plate to get the most of the multi-band antenna. For the following images below, we'll have the magnetic mount antenna separate from the antenna ground plate when connecting the NEO-F9P breakout board to the rest of the system. When running the examples, make sure to have the antenna mounted over a metal ground plate.</p> <p>Note</p> <p>Not all multiband antennas are made the same! Make sure that you are connecting a multi-band antenna that is capable of receiving L1/L5 signals when using the SparkFun Qwiic GNSS-RTK L1/L5 Breakout - NEO-F9P. There is also another u-blox antenna that looks the same. However, the u-blox antenna used in this tutorial receives L1/L5 signals as opposed to the L1/L2.</p>"},{"location":"hardware_hookup/#connecting-via-qwiic-port","title":"Connecting via Qwiic Port","text":"<p>Note</p> <p>We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For this example, we will use the IoT RedBoard - ESP32 and its associated cable. Connecting the boards with a Qwiic cable is very simple. Plug a Qwiic cable between the RedBoard IoT and the SparkFun NEO-F9P. If you're going to be soldering to the through hole pins, then just attach lines to power, ground, and the I<sup>2</sup>C data lines to the microcontroller of your choice.</p>"},{"location":"hardware_hookup/#usb-to-microcontroller","title":"USB to Microcontroller","text":"<p>To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p>"},{"location":"hardware_hookup/#usb-to-neo-f9p","title":"USB to NEO-F9P","text":"<p>For users that simply want to connect to the board via USB, you will insert a USB C cable into the USB connector. Then connect the other end to your computer USB port.</p>"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic). For more information, check out our Resources and Going Further for the NEO-F9P.</p> Top View Bottom View"},{"location":"hardware_overview/#neo-f9p-module","title":"NEO-F9P Module","text":"<p>The board breaks out the NEO-F9P.</p> <p>Similar to the other F9P engines, the NEO-F9P is a 184-Channel GNSS Receiver. The module supports the concurrent reception of four GNSS systems: GPS, GLONASS, Galileo and BeiDou. The NEO-F9P is an upgrade to the NEO-M8P and utilizes the L1/L5 bands as opposed to the ZED-F9P's L1/L2.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Utilizing the L5 band, the NEO-F9P delivers improved performance under challenging urban environments because the L5 signals fall within the protected ARNS (aeronautical radionavigation service) frequency band. This band is less subject to RF interference. Below is a comparison of a single-band (L1) vs dual-band (L1/L5) GNSS test with a car driving through an urban environment. Tracking the vehicle was better when utilizing the L1/L5 bands.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Note</p> <p>As of the writing of this tutorial, it is important to note that L5 band is still not yet fully operational on GPS and Galileo. It is expected to be fully operational by 2025.</p> <p>When a RTK solution is reached, the module can achieve a horizontal accuracy of about 10mm (~0.393 inches) and a vertical accuracy of about 10mm (~0.393 inches). The NEO-F9P is capable of both rover and base station operations. Below are a few specs taken from the datasheet. For more information, check out the related documents for the NEO-F9P in the Resources.</p> <ul> <li>Time to First Fix: 27s (cold), 3s (hot)</li> <li>Max Navigation Rate:<ul> <li>RTK (basic location over UBX binary protocol) - 25Hz</li> <li>PVT - 25Hz</li> <li>RAW - 25Hz</li> </ul> </li> <li>Horizontal Position Accuracy:<ul> <li>1.5m without RTK</li> <li>0.01m with RTK</li> </ul> </li> <li>Vertical Position Accuracy:<ul> <li>2.0m without RTK</li> <li>0.01m with RTK</li> </ul> </li> <li>Time Pulse Accuracy: 30ns</li> <li>Operational Limits<ul> <li>Max G: \u22644G</li> <li>Max Altitude: 80km (49.7 miles)</li> <li>Max Velocity: 500m/s (1118mph)</li> </ul> </li> <li>Software Configurable<ul> <li>Geofencing</li> <li>Odometer</li> <li>Spoofing Detection</li> <li>External Interrupt</li> <li>Pin Control</li> <li>Low Power Mode</li> <li>Many others!</li> </ul> </li> <li>Supports NMEA, UBX, RTCM, SPARTN, CLAS protocols over UART or I2C interfaces</li> </ul>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to connectors and through hole pads. 5V power from the USB C Connector or PTH is regulated down to 3.3V with the AP2112K 3.3V/600mA voltage regulator. The logic levels for the NEO-F9P is 3.3V for the I/O pins.</p> <ul> <li>5V \u2014 Power from the USB C connector's VBUS provides power to the 5V bus. The 5V net is also connected to the edge PTH pin labeled as 5V and the input of the 3.3V voltage regulator. Care must be taken when connecting to this pin to avoid conflicting voltages between the breakout board and anything connect to the 5V pin. Make sure that power you provide to this pin does not exceed 6 volts.</li> <li>3V3 \u2014 This connects to the 3.3V net. Both sides of the board includes a 3.3V pin (labeled as 3V3) that should only be provided with a clean 3.3V power signal. This is also connected to the Qwiic connectors.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul>"},{"location":"hardware_overview/#backup-battery","title":"Backup Battery","text":"<p>The small metal disk is a small lithium battery. This battery does not provide power to the IC like the 3.3V system does, but to relevant systems inside the IC that allow for a quick reconnection to satellites. The first time to fix (TTFF) is about ~27 seconds. With the backup battery, the hot start is less than 3 seconds.</p>"},{"location":"hardware_overview/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two PTHs labeled SDA and SCL on each side of the board. These indicate the I<sup>2</sup>C data and clock lines. These pins also have an alternative function for SPI: CS and SCK. By default, the I<sup>2</sup>C interface is enabled. As mentioned in the jumpers section, you'll need to keep the SPI jumper open on the underside for the I<sup>2</sup>C interface. We also conveniently added a GND and 3.3V pin on one side should you decide to daisy chain additional I<sup>2</sup>C devices to the PTH. Similarly, you can use either of the Qwiic connectors to provide power and utilize I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SDA/CS \u2014 I<sup>2</sup>C data / SPI Chip Select</li> <li>SCL/SCK \u2014 I<sup>2</sup>C clock / SPI Serial Clock</li> </ul> <p>Note</p> <p>The only I<sup>2</sup>C address for this and all u-Blox GPS products is 0x42, though each can have their address changed through software.</p> <p>Tip</p> <p>There are jumpers for the I<sup>2</sup>C data and clock lines. By default, these jumpers are open. Closing the jumpers will add 2.2k\u03a9 pull-up resistors to the I<sup>2</sup>C bus. For users that do not have pull-up resistors attached to the I<sup>2</sup>C lines on their microcontroller, make sure to close the jumpers with a little solder blob.</p>"},{"location":"hardware_overview/#uart1","title":"UART1","text":"<p>There are two pins on each row of headers currently labeled as TXD1 and RXD1 for the primary UART. These pins also have an alternative function for SPI: POCI and PICO. By default, the UART interface is enabled. Be sure that the SPI jumper on the back of the board is open.</p> <ul> <li>TXD1/POCI \u2014 TX out from NEO-F9P / SPI Peripheral Out Central In</li> <li>RXD1/PICO \u2014 RX into NEO-F9P / SPI Peripheral In Central Out</li> </ul>"},{"location":"hardware_overview/#uart2","title":"UART2","text":"<p>There is a second serial port available on the NEO-F9P. This is primarily used for RTCM3 correction data. By default, this port will automatically receive and parse incoming RTCM3 strings enabling RTK mode on the board like the other RTK breakout boards for the NEO-M8P-2 and ZED-F9P. The RTCM Correction port pins are arranged to match the industry standard serial connection (aka the 'FTDI' pinout). This pinout is compatible with our Bluetooth Mate and Serial Basic so you can send RTCM correction data from a cell phone or computer. Note that RTCM3 data can also be sent over I2C, UART1, SPI, or USB if desired.</p> <p>What is a BlueSMiRF?</p> <p>The BlueSMiRF was a Bluetooth device that was included in SparkFun's catalog. The footprint consists of a 1x6 header for the serial UART and power pins. Note that the arrangement of the header pins can be different from USB-to-serial converters (i.e. FTDI Serial Breakout Boards and CH340 Serial Basic Boards).</p>"},{"location":"hardware_overview/#spi","title":"SPI","text":"<p>There are four pins on the header that are labeled with their corresponding SPI functionality: POCI, PICO, CS, and SCK. These pins are shared with the UART and I<sup>2</sup>C pins. By default, the UART interface is enabled. As mentioned in the jumpers section, you'll need to close the SPI jumper on the underside to enable SPI interface. Note the board uses different terminology for SPI. For more information, make sure to check out our SPI tutorial.</p> <ul> <li>TXD1/POCI \u2014 TX out from NEO-F9P / SPI Peripheral Out Central In</li> <li>RXD1/PICO \u2014 RX into NEO-F9P / SPI Peripheral In Central Out</li> <li>SDA/CS \u2014 I<sup>2</sup>C data / SPI Chip Select</li> <li>SCL/SCK \u2014 I<sup>2</sup>C clock / SPI Serial Clock</li> </ul>"},{"location":"hardware_overview/#sma-connector","title":"SMA Connector","text":"<p>The board is populated with one SMA connector for a secure connection. You will need a multiband GNSS antenna capable of receiving L1 and L5 bands to get the most out of the NEO-F9P. Note that this is intended for active antennas. We recommend using the GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA). You will also need an antenna ground plate</p>"},{"location":"hardware_overview/#antenna-power","title":"Antenna Power","text":"<p>The antenna power pin (ANT PWR) is available for advanced users that want to power their L1/L5 3.3V active antenna with an external power source.</p> <p>Follow the steps below to modify the board.</p> <ul> <li>Isolate VCC_RF \u2014 You will need to isolate the VCC_RF. Users will need to make sure to cut the trace between the two arrows (i.e. \u25b6 \u25c0) to disable the VCC_RF antenna power. You can also shift the surface mount component that connects to the trace by moving it so that it does not connect to the SMA connector.</li> <li>Install SMD Component \u2014 You will then need to populate the board where L1 is located (i.e. the pads that are not currently populated and connects to the ANT PWR PTH) with a 0603 part with impedance &gt;500 Ohms at 1.5GHz.</li> <li>Inject Power \u2014 When ready, connect a clean DC power supply voltage between ANT PWR and GND.</li> </ul> Cut Trace VCC_RF Install SMD Component Inject Power to ANT PWR"},{"location":"hardware_overview/#broken-out-pins","title":"Broken Out Pins","text":"<p>There are six  other pins broken out:</p> <ul> <li>PPS \u2014 Pulse-per-second output pin. Begins blinking at 1Hz when module gets basic GPS/GNSS position lock.</li> <li>RTK_STAT \u2014 Real Time Kinematic status output pin. Remains high when module is in normal GPS mode. Begins blinking when RTCM corrections are received and module enters RTK float mode. Goes low when module enters RTK fixed mode and begins outputting cm-level accurate locations.</li> <li>RESET \u2014 Reset input pin. Pull this line low to reset the module.</li> <li>EXT INT \u2014 Interrupt input/output pin. Can be configured using U-Center to bring the module out of deep sleep or to output an interrupt for various module states.</li> <li>LNA_EN \u2014 Antenna, LNA control. During software backup mode, this pin is used to disable an antenna or optional external LNA using the LNA_EN signal to save power.</li> <li>SAFE \u2014 Safeboot input pin. This is required for firmware updates to the module and generally should not be used or connected.</li> </ul> Top View of Breakout Pins Bottom View of Breakout Pins"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 Indicates when the NEO-F9P is powered.</li> <li>PPS \u2014 Tied to the Pulse Per Second pin and acts as a visual indicator to the NEO-F9P's pulse per second signal.</li> <li>RTK \u2014 Indicates the status of the RTK lock. The RTK LED off upon power up. Once RTCM data has been successfully received it will begin to blink indicating an RTK float solution. This is a good way to see if the NEO-F9P is getting RTCM from various sources. Once an RTK fix is obtained, the LED will turn on.</li> </ul>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>If you flip the board over, you will notice a few jumper pads.</p> <ul> <li>SHLD \u2014 This jumper connects the USB Type C connector's shield pin to GND. By default, this is closed. Cut this to isolate the USB Type C connector's shield pin.</li> <li>3V3 \u2014 This jumper connects 3.3V to the UART2 port. By default, this is closed and will provide power to anything connected to the UART2 port. Cut this jumper if you are connecting a 3.3V USB-to-Serial converter with its own power source, or if the GNSS receiver is being powered with its own power source.</li> <li>I<sup>2</sup>C \u2014 This three way jumper labeled <code>I<sup>2</sup>C</code> will connect to two pull-up resistors to the I<sup>2</sup>C data and clock lines when closed. For users that do not have pull-up resistors attached to the I<sup>2</sup>C lines on their microcontroller, make sure to close the jumpers with a little solder blob.</li> <li>SPI \u2014  The jumper labeled SPI enables the SPI data bus, thus disabling the UART functions on those lines. This also disables I<sup>2</sup>C interface.</li> <li>RTK \u2014 The RTK LED indicates the status of the RTK lock. Cut this jumper to disable the LED.</li> <li>PWR \u2014 The power LED will illuminate when 3.3V is activated either over USB or via the Qwiic bus. Cut this jumper to disable the LED.</li> <li>PPS \u2014 The pulse per second LED will illuminate each second once a position lock has been achieved. Cut this jumper to disable the LED.</li> </ul>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.7\" x 1.7\" (43.1mm x 43.1mm). This is not including the SMA connector. There are 4x mounting holes by each corner of the board.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic) is a high precision GNSS board with equally impressive configuration options. Utilizing both the L1 and L5 bands, the NEO-F9P delivers improved performance under challenging urban environments because the L5 signals fall within the protected ARNS (aeronautical radionavigation service) frequency band. This band is less subject to RF interference.</p> <p> <ul> <li> <p> </p> <p> SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic)    GPS-23288    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>Similar to the ZED-F9P, the NEO-F9P module is a 184-channel u-blox F9 engine GNSS receiver, meaning it can receive signals from the GPS, GLONASS, Galileo, and BeiDou constellations with 10mm, three-dimensional accuracy! That's right; such accuracy can be achieved with an RTK navigation solution when used with a correction source. With this board, you will be able to know where your (or any object's) X, Y, and Z location is within roughly the width of your fingernail! Of course, the requirements for high precision GNSS requires a clear view of the sky (sorry, no indoor location) and a stream of correction data from an RTCM source. As long as you have two high precision breakout boards, or access to an online correction source, your NEO-F9P can output latitude, longitude, and altitude with centimeter grade accuracy. The module supports the concurrent reception of four GNSS systems. This module features a survey-in mode allowing the module to become a base station and produce RTCM 3.x correction data.</p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over a basic Arduino example to get started!</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic) [GPS-23288]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x Reinforced Interface Cable - SMA Male to TNC Male (10m) [CAB-21740]</li> <li>1x GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA) [GPS-23814]</li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic)    GPS-23288 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA)    GPS-23814 </p> </li> </ul>"},{"location":"introduction/#gnss-accessories-optional","title":"GNSS Accessories \u00a0(Optional)","text":"<p>Depending on your setup, you may need the following mounting hardware. As included earlier in the required materials, the antenna ground plate below is needed when using multi-band antennas that do not have a good ground plane.</p> <ul> <li>GPS Antenna Ground Plate [GPS-17519]</li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <p>For users that decide to use the SPK6618H multi-band antenna as an alternative, users would not need to include the antenna ground plate. The mounting hardware listed below is also typically used with the SPK6618H multi-band antennas. The reinforced interface cable between the SMA to TNC also needed for the SPK6618H multi-band antennas.</p> <ul> <li>GNSS Magnetic Mount [PRT-21257]</li> <li>GNSS Antenna Mounting Hardware Kit [KIT-22197]</li> <li>Reinforced Interface Cable - SMA Male to TNC Male (10m) [CAB-21740]</li> <li>GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) [GPS-21801]</li> </ul> <ul> <li> <p> </p> <p> GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H)    GPS-21801 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Magnetic Antenna Mount - 5/8\" 11-TPI    TOL-21257 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Antenna Mounting Hardware Kit    KIT-22197 </p> </li> </ul> <ul> <li> <p> </p> <p> Reinforced Interface Cable - SMA Male to TNC Male (10m)    CAB-21740 </p> </li> </ul>"},{"location":"introduction/#radios-optional","title":"Radios \u00a0(Optional)","text":"<p>For users that require radios to transmit RTK correction data, you could use the following radios.</p> <ul> <li>SiK Telemetry Radio V3 - 915MHz, 100mW [WRL-19032]</li> <li>SparkFun LoRaSerial Kit - 915MHz (Enclosed) [WRL-20029]</li> </ul> <ul> <li> <p> </p> <p> SiK Telemetry Radio V3 - 915MHz, 100mW    WRL-19032 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LoRaSerial Kit - 915MHz (Enclosed)    WRL-20029 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes.</p> <ul> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> <li>Flush Cutters - Xcelite [TOL-14782]</li> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For those using radios to connect a base station and rover together, you will need to connect to the PTHs. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li>Breadboard - Self-Adhesive (White) [PRT-12002]</li> <li>IC Hook with Pigtail [CAB-09741]</li> <li>Break Away Headers - Straight [PRT-00116]</li> <li>Female Headers [PRT-00115]</li> <li>Jumper Wires Premium 6\" M/M Pack of 10 [PRT-08431]</li> </ul> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> GPS Basics </p> </li> </ul> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> What is GPS RTK? </p> </li> </ul> <ul> <li> <p> </p> <p> Getting Started with U-Center for u-blox </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>New Video: Unlocking High-Precision RTK Positioning</p>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <p>SparkFun Resources</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Qwiic Info Page</li> <li>Building a GPS System</li> <li>RTK Solutions</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> </ul> <p>u-blox NEO-F9P Resources</p> <ul> <li>Product Summary (PDF)</li> <li>Datasheet (PDF)</li> <li>Integration Manual (PDF)</li> <li>GPS L5 Application Note (PDF)</li> <li>Interface Description (PDF)</li> <li>Release Notes - FW1.00 (PDF)</li> <li>White Paper: Modern GNSS/GPS signals: Moving from Single-Band to Dual-Band (PDF)</li> <li>u-blox ECCN (PDF)</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic) is a high precision GNSS board with equally impressive configuration options. Utilizing both the L1 and L5 bands, the NEO-F9P delivers improved performance under challenging urban environments because the L5 signals fall within the protected ARNS (aeronautical radionavigation service) frequency band. This band is less subject to RF interference.</p> <p> <ul> <li> <p> </p> <p> SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic)    GPS-23288    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>Similar to the ZED-F9P, the NEO-F9P module is a 184-channel u-blox F9 engine GNSS receiver, meaning it can receive signals from the GPS, GLONASS, Galileo, and BeiDou constellations with 10mm, three-dimensional accuracy! That's right; such accuracy can be achieved with an RTK navigation solution when used with a correction source. With this board, you will be able to know where your (or any object's) X, Y, and Z location is within roughly the width of your fingernail! Of course, the requirements for high precision GNSS requires a clear view of the sky (sorry, no indoor location) and a stream of correction data from an RTCM source. As long as you have two high precision breakout boards, or access to an online correction source, your NEO-F9P can output latitude, longitude, and altitude with centimeter grade accuracy. The module supports the concurrent reception of four GNSS systems. This module features a survey-in mode allowing the module to become a base station and produce RTCM 3.x correction data.</p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over a basic Arduino example to get started!</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic) [GPS-23288]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x Reinforced Interface Cable - SMA Male to TNC Male (10m) [CAB-21740]</li> <li>1x GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA) [GPS-23814]</li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic)    GPS-23288 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA)    GPS-23814 </p> </li> </ul>"},{"location":"single_page/#gnss-accessories-optional","title":"GNSS Accessories \u00a0(Optional)","text":"<p>Depending on your setup, you may need the following mounting hardware. As included earlier in the required materials, the antenna ground plate below is needed when using multi-band antennas that do not have a good ground plane.</p> <ul> <li>GPS Antenna Ground Plate [GPS-17519]</li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <p>For users that decide to use the SPK6618H multi-band antenna as an alternative, users would not need to include the antenna ground plate. The mounting hardware listed below is also typically used with the SPK6618H multi-band antennas. The reinforced interface cable between the SMA to TNC also needed for the SPK6618H multi-band antennas.</p> <ul> <li>GNSS Magnetic Mount [PRT-21257]</li> <li>GNSS Antenna Mounting Hardware Kit [KIT-22197]</li> <li>Reinforced Interface Cable - SMA Male to TNC Male (10m) [CAB-21740]</li> <li>GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) [GPS-21801]</li> </ul> <ul> <li> <p> </p> <p> GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H)    GPS-21801 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Magnetic Antenna Mount - 5/8\" 11-TPI    TOL-21257 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Antenna Mounting Hardware Kit    KIT-22197 </p> </li> </ul> <ul> <li> <p> </p> <p> Reinforced Interface Cable - SMA Male to TNC Male (10m)    CAB-21740 </p> </li> </ul>"},{"location":"single_page/#radios-optional","title":"Radios \u00a0(Optional)","text":"<p>For users that require radios to transmit RTK correction data, you could use the following radios.</p> <ul> <li>SiK Telemetry Radio V3 - 915MHz, 100mW [WRL-19032]</li> <li>SparkFun LoRaSerial Kit - 915MHz (Enclosed) [WRL-20029]</li> </ul> <ul> <li> <p> </p> <p> SiK Telemetry Radio V3 - 915MHz, 100mW    WRL-19032 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LoRaSerial Kit - 915MHz (Enclosed)    WRL-20029 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes.</p> <ul> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> <li>Flush Cutters - Xcelite [TOL-14782]</li> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For those using radios to connect a base station and rover together, you will need to connect to the PTHs. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li>Breadboard - Self-Adhesive (White) [PRT-12002]</li> <li>IC Hook with Pigtail [CAB-09741]</li> <li>Break Away Headers - Straight [PRT-00116]</li> <li>Female Headers [PRT-00115]</li> <li>Jumper Wires Premium 6\" M/M Pack of 10 [PRT-08431]</li> </ul> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> GPS Basics </p> </li> </ul> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> What is GPS RTK? </p> </li> </ul> <ul> <li> <p> </p> <p> Getting Started with U-Center for u-blox </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>New Video: Unlocking High-Precision RTK Positioning</p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic). For more information, check out our Resources and Going Further for the NEO-F9P.</p> Top View Bottom View"},{"location":"single_page/#neo-f9p-module","title":"NEO-F9P Module","text":"<p>The board breaks out the NEO-F9P.</p> <p>Similar to the other F9P engines, the NEO-F9P is a 184-Channel GNSS Receiver. The module supports the concurrent reception of four GNSS systems: GPS, GLONASS, Galileo and BeiDou. The NEO-F9P is an upgrade to the NEO-M8P and utilizes the L1/L5 bands as opposed to the ZED-F9P's L1/L2.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Utilizing the L5 band, the NEO-F9P delivers improved performance under challenging urban environments because the L5 signals fall within the protected ARNS (aeronautical radionavigation service) frequency band. This band is less subject to RF interference. Below is a comparison of a single-band (L1) vs dual-band (L1/L5) GNSS test with a car driving through an urban environment. Tracking the vehicle was better when utilizing the L1/L5 bands.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Note</p> <p>As of the writing of this tutorial, it is important to note that L5 band is still not yet fully operational on GPS and Galileo. It is expected to be fully operational by 2025.</p> <p>When a RTK solution is reached, the module can achieve a horizontal accuracy of about 10mm (~0.393 inches) and a vertical accuracy of about 10mm (~0.393 inches). The NEO-F9P is capable of both rover and base station operations. Below are a few specs taken from the datasheet. For more information, check out the related documents for the NEO-F9P in the Resources.</p> <ul> <li>Time to First Fix: 27s (cold), 3s (hot)</li> <li>Max Navigation Rate:<ul> <li>RTK (basic location over UBX binary protocol) - 25Hz</li> <li>PVT - 25Hz</li> <li>RAW - 25Hz</li> </ul> </li> <li>Horizontal Position Accuracy:<ul> <li>1.5m without RTK</li> <li>0.01m with RTK</li> </ul> </li> <li>Vertical Position Accuracy:<ul> <li>2.0m without RTK</li> <li>0.01m with RTK</li> </ul> </li> <li>Time Pulse Accuracy: 30ns</li> <li>Operational Limits<ul> <li>Max G: \u22644G</li> <li>Max Altitude: 80km (49.7 miles)</li> <li>Max Velocity: 500m/s (1118mph)</li> </ul> </li> <li>Software Configurable<ul> <li>Geofencing</li> <li>Odometer</li> <li>Spoofing Detection</li> <li>External Interrupt</li> <li>Pin Control</li> <li>Low Power Mode</li> <li>Many others!</li> </ul> </li> <li>Supports NMEA, UBX, RTCM, SPARTN, CLAS protocols over UART or I2C interfaces</li> </ul>"},{"location":"single_page/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to connectors and through hole pads. 5V power from the USB C Connector or PTH is regulated down to 3.3V with the AP2112K 3.3V/600mA voltage regulator. The logic levels for the NEO-F9P is 3.3V for the I/O pins.</p> <ul> <li>5V \u2014 Power from the USB C connector's VBUS provides power to the 5V bus. The 5V net is also connected to the edge PTH pin labeled as 5V and the input of the 3.3V voltage regulator. Care must be taken when connecting to this pin to avoid conflicting voltages between the breakout board and anything connect to the 5V pin. Make sure that power you provide to this pin does not exceed 6 volts.</li> <li>3V3 \u2014 This connects to the 3.3V net. Both sides of the board includes a 3.3V pin (labeled as 3V3) that should only be provided with a clean 3.3V power signal. This is also connected to the Qwiic connectors.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul>"},{"location":"single_page/#backup-battery","title":"Backup Battery","text":"<p>The small metal disk is a small lithium battery. This battery does not provide power to the IC like the 3.3V system does, but to relevant systems inside the IC that allow for a quick reconnection to satellites. The first time to fix (TTFF) is about ~27 seconds. With the backup battery, the hot start is less than 3 seconds.</p>"},{"location":"single_page/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two PTHs labeled SDA and SCL on each side of the board. These indicate the I<sup>2</sup>C data and clock lines. These pins also have an alternative function for SPI: CS and SCK. By default, the I<sup>2</sup>C interface is enabled. As mentioned in the jumpers section, you'll need to keep the SPI jumper open on the underside for the I<sup>2</sup>C interface. We also conveniently added a GND and 3.3V pin on one side should you decide to daisy chain additional I<sup>2</sup>C devices to the PTH. Similarly, you can use either of the Qwiic connectors to provide power and utilize I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SDA/CS \u2014 I<sup>2</sup>C data / SPI Chip Select</li> <li>SCL/SCK \u2014 I<sup>2</sup>C clock / SPI Serial Clock</li> </ul> <p>Note</p> <p>The only I<sup>2</sup>C address for this and all u-Blox GPS products is 0x42, though each can have their address changed through software.</p> <p>Tip</p> <p>There are jumpers for the I<sup>2</sup>C data and clock lines. By default, these jumpers are open. Closing the jumpers will add 2.2k\u03a9 pull-up resistors to the I<sup>2</sup>C bus. For users that do not have pull-up resistors attached to the I<sup>2</sup>C lines on their microcontroller, make sure to close the jumpers with a little solder blob.</p>"},{"location":"single_page/#uart1","title":"UART1","text":"<p>There are two pins on each row of headers currently labeled as TXD1 and RXD1 for the primary UART. These pins also have an alternative function for SPI: POCI and PICO. By default, the UART interface is enabled. Be sure that the SPI jumper on the back of the board is open.</p> <ul> <li>TXD1/POCI \u2014 TX out from NEO-F9P / SPI Peripheral Out Central In</li> <li>RXD1/PICO \u2014 RX into NEO-F9P / SPI Peripheral In Central Out</li> </ul>"},{"location":"single_page/#uart2","title":"UART2","text":"<p>There is a second serial port available on the NEO-F9P. This is primarily used for RTCM3 correction data. By default, this port will automatically receive and parse incoming RTCM3 strings enabling RTK mode on the board like the other RTK breakout boards for the NEO-M8P-2 and ZED-F9P. The RTCM Correction port pins are arranged to match the industry standard serial connection (aka the 'FTDI' pinout). This pinout is compatible with our Bluetooth Mate and Serial Basic so you can send RTCM correction data from a cell phone or computer. Note that RTCM3 data can also be sent over I2C, UART1, SPI, or USB if desired.</p> <p>What is a BlueSMiRF?</p> <p>The BlueSMiRF was a Bluetooth device that was included in SparkFun's catalog. The footprint consists of a 1x6 header for the serial UART and power pins. Note that the arrangement of the header pins can be different from USB-to-serial converters (i.e. FTDI Serial Breakout Boards and CH340 Serial Basic Boards).</p>"},{"location":"single_page/#spi","title":"SPI","text":"<p>There are four pins on the header that are labeled with their corresponding SPI functionality: POCI, PICO, CS, and SCK. These pins are shared with the UART and I<sup>2</sup>C pins. By default, the UART interface is enabled. As mentioned in the jumpers section, you'll need to close the SPI jumper on the underside to enable SPI interface. Note the board uses different terminology for SPI. For more information, make sure to check out our SPI tutorial.</p> <ul> <li>TXD1/POCI \u2014 TX out from NEO-F9P / SPI Peripheral Out Central In</li> <li>RXD1/PICO \u2014 RX into NEO-F9P / SPI Peripheral In Central Out</li> <li>SDA/CS \u2014 I<sup>2</sup>C data / SPI Chip Select</li> <li>SCL/SCK \u2014 I<sup>2</sup>C clock / SPI Serial Clock</li> </ul>"},{"location":"single_page/#sma-connector","title":"SMA Connector","text":"<p>The board is populated with one SMA connector for a secure connection. You will need a multiband GNSS antenna capable of receiving L1 and L5 bands to get the most out of the NEO-F9P. Note that this is intended for active antennas. We recommend using the GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA). You will also need an antenna ground plate</p>"},{"location":"single_page/#antenna-power","title":"Antenna Power","text":"<p>The antenna power pin (ANT PWR) is available for advanced users that want to power their L1/L5 3.3V active antenna with an external power source.</p> <p>Follow the steps below to modify the board.</p> <ul> <li>Isolate VCC_RF \u2014 You will need to isolate the VCC_RF. Users will need to make sure to cut the trace between the two arrows (i.e. \u25b6 \u25c0) to disable the VCC_RF antenna power. You can also shift the surface mount component that connects to the trace by moving it so that it does not connect to the SMA connector.</li> <li>Install SMD Component \u2014 You will then need to populate the board where L1 is located (i.e. the pads that are not currently populated and connects to the ANT PWR PTH) with a 0603 part with impedance &gt;500 Ohms at 1.5GHz.</li> <li>Inject Power \u2014 When ready, connect a clean DC power supply voltage between ANT PWR and GND.</li> </ul> Cut Trace VCC_RF Install SMD Component Inject Power to ANT PWR"},{"location":"single_page/#broken-out-pins","title":"Broken Out Pins","text":"<p>There are six  other pins broken out:</p> <ul> <li>PPS \u2014 Pulse-per-second output pin. Begins blinking at 1Hz when module gets basic GPS/GNSS position lock.</li> <li>RTK_STAT \u2014 Real Time Kinematic status output pin. Remains high when module is in normal GPS mode. Begins blinking when RTCM corrections are received and module enters RTK float mode. Goes low when module enters RTK fixed mode and begins outputting cm-level accurate locations.</li> <li>RESET \u2014 Reset input pin. Pull this line low to reset the module.</li> <li>EXT INT \u2014 Interrupt input/output pin. Can be configured using U-Center to bring the module out of deep sleep or to output an interrupt for various module states.</li> <li>LNA_EN \u2014 Antenna, LNA control. During software backup mode, this pin is used to disable an antenna or optional external LNA using the LNA_EN signal to save power.</li> <li>SAFE \u2014 Safeboot input pin. This is required for firmware updates to the module and generally should not be used or connected.</li> </ul> Top View of Breakout Pins Bottom View of Breakout Pins"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 Indicates when the NEO-F9P is powered.</li> <li>PPS \u2014 Tied to the Pulse Per Second pin and acts as a visual indicator to the NEO-F9P's pulse per second signal.</li> <li>RTK \u2014 Indicates the status of the RTK lock. The RTK LED off upon power up. Once RTCM data has been successfully received it will begin to blink indicating an RTK float solution. This is a good way to see if the NEO-F9P is getting RTCM from various sources. Once an RTK fix is obtained, the LED will turn on.</li> </ul>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>If you flip the board over, you will notice a few jumper pads.</p> <ul> <li>SHLD \u2014 This jumper connects the USB Type C connector's shield pin to GND. By default, this is closed. Cut this to isolate the USB Type C connector's shield pin.</li> <li>3V3 \u2014 This jumper connects 3.3V to the UART2 port. By default, this is closed and will provide power to anything connected to the UART2 port. Cut this jumper if you are connecting a 3.3V USB-to-Serial converter with its own power source, or if the GNSS receiver is being powered with its own power source.</li> <li>I<sup>2</sup>C \u2014 This three way jumper labeled <code>I<sup>2</sup>C</code> will connect to two pull-up resistors to the I<sup>2</sup>C data and clock lines when closed. For users that do not have pull-up resistors attached to the I<sup>2</sup>C lines on their microcontroller, make sure to close the jumpers with a little solder blob.</li> <li>SPI \u2014  The jumper labeled SPI enables the SPI data bus, thus disabling the UART functions on those lines. This also disables I<sup>2</sup>C interface.</li> <li>RTK \u2014 The RTK LED indicates the status of the RTK lock. Cut this jumper to disable the LED.</li> <li>PWR \u2014 The power LED will illuminate when 3.3V is activated either over USB or via the Qwiic bus. Cut this jumper to disable the LED.</li> <li>PPS \u2014 The pulse per second LED will illuminate each second once a position lock has been achieved. Cut this jumper to disable the LED.</li> </ul>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.7\" x 1.7\" (43.1mm x 43.1mm). This is not including the SMA connector. There are 4x mounting holes by each corner of the board.</p>"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the L1/L5 GNSS Antenna, SparkFun Qwiic GNSS-RTK L1/L5 Breakout - NEO-F9P, and IoT RedBoard - ESP32 for embedded systems. Of course, you can also connect the NEO-F9P directly to your computer without the need for a microcontroller if you decide to use the u-blox u-center software as well.</p>"},{"location":"single_page/#l1l5-dual-band-gnss-antenna","title":"L1/L5 Dual-Band GNSS Antenna","text":"<p>Connect a compatible dual-band antenna that is capable of receiving L1 and L5 bands. In this case, we used the \"GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA).\"  Insert the TNC side of the interface cable into the antenna's TNC connector. Secure the connection by tightening the screw until it is finger-tight. Then insert the SMA side of the interface cable into the GNSS-RTK L1/L5 Breakout Board's SMA connector. Secure the connection by using the SMA's hex nut until it is finger-tight.</p> <p>You will need to include an antenna ground plate to get the most of the multi-band antenna. For the following images below, we'll have the magnetic mount antenna separate from the antenna ground plate when connecting the NEO-F9P breakout board to the rest of the system. When running the examples, make sure to have the antenna mounted over a metal ground plate.</p> <p>Note</p> <p>Not all multiband antennas are made the same! Make sure that you are connecting a multi-band antenna that is capable of receiving L1/L5 signals when using the SparkFun Qwiic GNSS-RTK L1/L5 Breakout - NEO-F9P. There is also another u-blox antenna that looks the same. However, the u-blox antenna used in this tutorial receives L1/L5 signals as opposed to the L1/L2.</p>"},{"location":"single_page/#connecting-via-qwiic-port","title":"Connecting via Qwiic Port","text":"<p>Note</p> <p>We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For this example, we will use the IoT RedBoard - ESP32 and its associated cable. Connecting the boards with a Qwiic cable is very simple. Plug a Qwiic cable between the RedBoard IoT and the SparkFun NEO-F9P. If you're going to be soldering to the through hole pins, then just attach lines to power, ground, and the I<sup>2</sup>C data lines to the microcontroller of your choice.</p>"},{"location":"single_page/#usb-to-microcontroller","title":"USB to Microcontroller","text":"<p>To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p>"},{"location":"single_page/#usb-to-neo-f9p","title":"USB to NEO-F9P","text":"<p>For users that simply want to connect to the board via USB, you will insert a USB C cable into the USB connector. Then connect the other end to your computer USB port.</p>"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written a library to work with the u-blox NEO-F9P. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun u-blox GNSS v3\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun u-blox GNSS Arduino Library - v3  (ZIP) <p>Once you have the library installed checkout the various examples! There are several examples in the library that cover more than just the NEO-F9P. Note that some examples will not apply depending on the modules features. To take advantage of the F9P, we will be looking at the ZED-F9P folder.</p>"},{"location":"single_page/#enabling-l5-band-and-overriding-health-status","title":"Enabling L5 Band and Overriding Health Status","text":"<p>By default, the L5 band is disabled on the NEO-F9P. To take advantage of the L5 band, you will need to:</p> <ul> <li>enable the L5 band</li> <li>override the health status check</li> <li>save the settings into memory</li> <li>perform a software reset</li> </ul>"},{"location":"single_page/#configuring-with-the-arduino-library","title":"Configuring with the Arduino Library","text":"<p>Arduino</p> <p>Make sure that you are using the SparkFun u-blox GNSS Arduino Library v3.1.1+ in order to be able to take advantage of the following functions.</p> <p>To do this using the Arduino Library, users can add the following three lines of code in the <code>setup()</code> function after connecting a Qwiic cable between an Arduino to the NEO-F9P:</p> <pre><code>  if (myGNSS.begin() == false) //Connect to the u-blox module using Wire port\n  {\n    Serial.println(F(\"u-blox GNSS not detected at default I2C address. Please check wiring. Freezing.\"));\n    while (1);\n  }\n\n  myGNSS.setI2COutput(COM_TYPE_UBX); //Set the I2C port to output UBX only (turn off NMEA noise)\n  //myGNSS.saveConfiguration(); //Optional: Save the current settings to flash and BBR\n\n  //Add the following 3 lines below to enable L5 band and override health status check on the NEO-F9P\n  myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1); // Make sure the GPS L5 band is enabled (needed on the NEO-F9P)\n\n  myGNSS.setGPSL5HealthOverride(true); // Mark L5 signals as healthy - store in RAM and BBR\n\n  myGNSS.softwareResetGNSSOnly(); // Restart the GNSS to apply the L5 health override\n</code></pre>"},{"location":"single_page/#configuring-with-u-center","title":"Configuring with U-Center","text":"<p>Users can also enable the L5 band via U-Center v22.07. Connect a USB cable between the NEO-F9P breakout board and your computer. Then open the software, connect to the COM port that the board enumerated to, and head to View &gt; Generation 9 Configuration View. Once open, select the check box for GPS's L5. Select the check box for BBR. When ready, hit the Send Configuration button.</p> <p>To override the health status by heading to View &gt; Messages View &gt; CUSTOM. With the Custom Messages set for Hex, paste the following to configure the settings in RAM and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 00 01 00 00 01 00 32 10 01 DE ED\n</code></pre> <p>Then send the following to configure the settings in BBR and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 00 02 00 00 01 00 32 10 01 DF F5\n</code></pre> <p>Tip</p> <p>To confirm that the above UBX messages were sent successfully, check the <code>UBX-ACK-ACK</code> messages after sending the message. For users that want to revert to the default behavior, make sure to check the GPS L5 Configuration: GNSS receiver handling of GPS L5 health status application note on page 5 under Table 2: UBX binary strings to revert the GPS L5 health status monitoring to default.</p> <p>The \"Satellite Level History\" window should update and include the L5 bands if it is available.</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>--8&lt;-- \"./docs/arduino_examples.md</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P (Qwiic) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <p>SparkFun Resources</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Qwiic Info Page</li> <li>Building a GPS System</li> <li>RTK Solutions</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> </ul> <p>u-blox NEO-F9P Resources</p> <ul> <li>Product Summary (PDF)</li> <li>Datasheet (PDF)</li> <li>Integration Manual (PDF)</li> <li>GPS L5 Application Note (PDF)</li> <li>Interface Description (PDF)</li> <li>Release Notes - FW1.00 (PDF)</li> <li>White Paper: Modern GNSS/GPS signals: Moving from Single-Band to Dual-Band (PDF)</li> <li>u-blox ECCN (PDF)</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F9P repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}